{"ast":null,"code":"import{API_ENDPOINTS}from\"../config/apiConfig\";export const uploadFileAPI=async(userId,token,file,mediaType,format)=>{const fileContent=await getFileAsBase64(file);const payload={user_id:userId,media_type:mediaType,format:format,file_size:file.size.toString(),// File size in bytes\nfile:fileContent// Base64-encoded content\n};try{const response=await fetch(API_ENDPOINTS.uploadFile,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(payload)});if(!response.ok){throw new Error(\"Failed to upload file\");}const data=await response.json();return data;// Expecting { \"access_code\": \"generated_code\" }\n}catch(error){console.error(\"Error uploading file:\",error);throw error;}};const getFileAsBase64=file=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=()=>resolve(reader.result.split(\",\")[1]);// Extract Base64 string\nreader.onerror=error=>reject(error);reader.readAsDataURL(file);});};export const retrieveFileAPI=async(userId,token,accessCode)=>{const response=await fetch(\"\".concat(API_ENDPOINTS.retrieveFile),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({user_id:userId,token:token,access_code:accessCode})});if(!response.ok){const errorText=await response.text();throw new Error(errorText||\"Failed to retrieve file.\");}return response.json();};","map":{"version":3,"names":["API_ENDPOINTS","uploadFileAPI","userId","token","file","mediaType","format","fileContent","getFileAsBase64","payload","user_id","media_type","file_size","size","toString","response","fetch","uploadFile","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","Promise","resolve","reject","reader","FileReader","onload","result","split","onerror","readAsDataURL","retrieveFileAPI","accessCode","concat","retrieveFile","access_code","errorText","text"],"sources":["C:/Users/popul/Documents/Programming/Sendable/src/api/fileAPI.js"],"sourcesContent":["import { API_ENDPOINTS } from \"../config/apiConfig\";\r\n\r\nexport const uploadFileAPI = async (userId, token, file, mediaType, format) => {\r\n  const fileContent = await getFileAsBase64(file);\r\n  const payload = {\r\n    user_id: userId,\r\n    media_type: mediaType,\r\n    format: format,\r\n    file_size: file.size.toString(), // File size in bytes\r\n    file: fileContent, // Base64-encoded content\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(API_ENDPOINTS.uploadFile, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to upload file\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data; // Expecting { \"access_code\": \"generated_code\" }\r\n  } catch (error) {\r\n    console.error(\"Error uploading file:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getFileAsBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result.split(\",\")[1]); // Extract Base64 string\r\n    reader.onerror = (error) => reject(error);\r\n    reader.readAsDataURL(file);\r\n  });\r\n};\r\n\r\nexport const retrieveFileAPI = async (userId, token, accessCode) => {\r\n  const response = await fetch(`${API_ENDPOINTS.retrieveFile}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      user_id: userId,\r\n      token: token,\r\n      access_code: accessCode,\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(errorText || \"Failed to retrieve file.\");\r\n  }\r\n\r\n  return response.json();\r\n};\r\n"],"mappings":"AAAA,OAASA,aAAa,KAAQ,qBAAqB,CAEnD,MAAO,MAAM,CAAAC,aAAa,CAAG,KAAAA,CAAOC,MAAM,CAAEC,KAAK,CAAEC,IAAI,CAAEC,SAAS,CAAEC,MAAM,GAAK,CAC7E,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAC,eAAe,CAACJ,IAAI,CAAC,CAC/C,KAAM,CAAAK,OAAO,CAAG,CACdC,OAAO,CAAER,MAAM,CACfS,UAAU,CAAEN,SAAS,CACrBC,MAAM,CAAEA,MAAM,CACdM,SAAS,CAAER,IAAI,CAACS,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAE;AACjCV,IAAI,CAAEG,WAAa;AACrB,CAAC,CAED,GAAI,CACF,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAChB,aAAa,CAACiB,UAAU,CAAE,CACrDC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACb,OAAO,CAC9B,CAAC,CAAC,CAEF,GAAI,CAACM,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CAAE;AACf,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAnB,eAAe,CAAIJ,IAAI,EAAK,CAChC,MAAO,IAAI,CAAAyB,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,UAAU,CAAC,CAAC,CAC/BD,MAAM,CAACE,MAAM,CAAG,IAAMJ,OAAO,CAACE,MAAM,CAACG,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;AAC5DJ,MAAM,CAACK,OAAO,CAAIV,KAAK,EAAKI,MAAM,CAACJ,KAAK,CAAC,CACzCK,MAAM,CAACM,aAAa,CAAClC,IAAI,CAAC,CAC5B,CAAC,CAAC,CACJ,CAAC,CAED,MAAO,MAAM,CAAAmC,eAAe,CAAG,KAAAA,CAAOrC,MAAM,CAAEC,KAAK,CAAEqC,UAAU,GAAK,CAClE,KAAM,CAAAzB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAyB,MAAA,CAAIzC,aAAa,CAAC0C,YAAY,EAAI,CAC5DxB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBZ,OAAO,CAAER,MAAM,CACfC,KAAK,CAAEA,KAAK,CACZwC,WAAW,CAAEH,UACf,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACzB,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,CAAAqB,SAAS,CAAG,KAAM,CAAA7B,QAAQ,CAAC8B,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAArB,KAAK,CAACoB,SAAS,EAAI,0BAA0B,CAAC,CAC1D,CAEA,MAAO,CAAA7B,QAAQ,CAACW,IAAI,CAAC,CAAC,CACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}